{"version":3,"sources":["components/Navigation.js","components/dinguerie/Line.js","components/dinguerie/Users.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Navigation","props","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","React","Component","Line","state","count","clickCount","bind","event","this","setState","name","Button","variant","onClick","Users","value","users","handleChange","handleSubmit","target","usr","push","preventDefault","table","map","user","Jumbotron","InputGroup","FormControl","aria-describedby","onChange","Prepend","Table","striped","bordered","hover","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9eab8c54.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navigation.css';\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\n\r\n\r\nclass Navigation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand href=\"/\">Le Sac Est Prêt</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"/dinguerie/\">Dinguerie</Nav.Link>\r\n                        <Nav.Link href=\"/calendar/\">Calendrier</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\nclass Line extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: this.props.count\r\n        }\r\n        this.clickCount = this.clickCount.bind(this);\r\n    }\r\n\r\n    clickCount (event) {\r\n        this.setState({ count: this.state.count + 1})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td className=\"text-center\">{this.props.name}</td>\r\n                <td className=\"text-center\">{this.state.count}</td>\r\n                <td className=\"text-center\">\r\n                    <Button variant=\"danger\" onClick={ this.clickCount }>Vote</Button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Line;","import React from 'react';\r\nimport './Users.css';\r\nimport { Jumbotron, Button, InputGroup, FormControl, Table } from 'react-bootstrap';\r\nimport Line from './Line';\r\n\r\n\r\nclass Users extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: \"\",\r\n            users: [\r\n                { \"name\": \"greg\", \"count\": 0 },\r\n                { \"name\": \"yoann\", \"count\": 0 },\r\n            ]\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let usr = this.state.users;\r\n        usr.push({ \"name\": this.state.value, \"count\": 0 });\r\n        this.setState({ users: usr });\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n\r\n        let table = (\r\n            <tbody>\r\n                {this.state.users.map((user) => (\r\n                    <Line name={user.name} count={user.count} />\r\n                ))}\r\n            </tbody>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <Jumbotron>\r\n                    <h1 className=\"text-center\">Utilisateurs</h1>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl aria-describedby=\"basic-addon1\" value={this.state.value} onChange={this.handleChange} />\r\n                        <InputGroup.Prepend>\r\n                            <Button variant=\"outline-secondary\" onClick={this.handleSubmit}>Ajouter</Button>\r\n                        </InputGroup.Prepend>\r\n                    </InputGroup>\r\n                    <Table striped bordered hover>\r\n                        {table}\r\n                    </Table>\r\n                </Jumbotron>\r\n                <Jumbotron>\r\n                    <h2>Précédents gagnants</h2>\r\n                    <Table striped bordered hover>\r\n                        <tr>\r\n                            <td className=\"text-center\">competiteur</td>\r\n                            <td className=\"text-center\">XXX</td>\r\n                            <td className=\"text-center\">XX/XX/XXXX</td>\r\n                        </tr>\r\n                    </Table>\r\n                </Jumbotron>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;","import React from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation';\nimport Users from './components/dinguerie/Users';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Users />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}